#include <bits/stdc++.h>

const int kMaxN = 1e6;

using std::cin;
using std::cout;
using std::endl;

template <class type>
class Group {
private:
  struct node {
    int v;
    type value;
  };
  std::vector<std::vector<node>> g;
public:
  void init(int n) { g.resize(n + 1); }
  void add(int u, int v, type t) {
    cout << u << endl;
    g[u].push_back({v, t});
  }
  std::vector<node>& get(int u) {
    return g[u];
  }
};

Group<int> g;

int a[kMaxN];
int tot = 0;
int dfn[kMaxN], low[kMaxN];
bool inStack[kMaxN];
std::vector<int> tarjanStack;

void dfs(int u, Group<int>& g) {
  for (auto i : g.get(u)) {
    dfs(i.v, g);
  }
}

void tarjan(int u, Group<int>& g) {
  dfn[u] = low[u] = ++tot;
  tarjanStack.push_back(u);
  inStack[u] = true;
  for (auto i : g.get(u)) {
    if (!dfn[i.v]) {
      tarjan(i.v, g);
      low[u] = std::min(low[u], low[i.v]);
    } else if (inStack[i.v]) {
      low[u] = std::min(low[u], dfn[i.v]);
    }
  }
  if (low[u] == dfn[u]) { }
}

int main() {
  int n, m;
  cin >> n >> m;
  g.init(n);
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
  }
  for (int i = 1; i <= m; i++) {
    int u, v;
    cin >> u >> v;
    g.add(u, v, 0);
  }
  return 0;
}
