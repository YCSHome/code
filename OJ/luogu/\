#include <iostream>
#include <cstring>

using namespace std;

const int kMaxN = 1e6;
const int INF = 0x3f3f3f3f;

int n, m, k;
int x[kMaxN], y[kMaxN];
int up[kMaxN], down[kMaxN];
int able[11000][1101];

int main() {
  cin >> n >> m >> k;
  memset(up, 0x3f, sizeof(up));
  memset(down, 0, sizeof(down));
  memset(able, 0x3f, sizeof(able));
  for (int i = 1; i <= m; i++) {
    able[0][i] = true;
  }
  for (int i = 0; i < n; i++) {
    cin >> x[i] >> y[i];
  }
  for (int i = 1; i <= k; i++) {
    int x, l, p;
    cin >> x >> l >> p;
    up[x] = p, down[x] = l;
  }
  bool flag = false;
  for (int i = 0; i < n; i++) {
    flag = false;
    for (int j = 1; j <= m; j++) {
      if (able[i][j] != INF) {
        int U = min(j + x[i], m), D = j - y[i];
        if (U > down[i + 1] && U < up[i + 1]) { able[i + 1][U] = min(able[i + 1][U], able[i][j] + 1; }
        if (D > down[i + 1] && D < up[i + 1]) { able[i + 1][D] = true; }
        flag = true;
      }
    }
  }
  return 0;
}
